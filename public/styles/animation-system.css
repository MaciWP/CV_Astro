/* 
 * Unified Animation System
 * This file defines animation standards across the application
 * src/styles/animation-system.css
 */

:root {
  /* 
     * STANDARD DURATIONS
     * -----------------
     * Unified time system for different types of animations
     */
  --duration-micro: 100ms;
  /* For minimal changes (simple hovers) */
  --duration-fast: 150ms;
  /* For most interactions */
  --duration-standard: 250ms;
  /* For standard transitions and entrances */
  --duration-emphasis: 400ms;
  /* For more dramatic movements */
  --duration-complex: 600ms;
  /* For complex/sequential animations */

  /* 
     * TIMING CURVES
     * --------------
     * Standard timing functions for different types of movement
     */
  /* For regular movements with natural acceleration */
  --ease-standard: cubic-bezier(0.33, 1, 0.68, 1);

  /* For entrances with slight bounce */
  --ease-bounce: cubic-bezier(0.34, 1.56, 0.64, 1);

  /* For entrances with elastic effect */
  --ease-elastic: cubic-bezier(0.22, 1.75, 0.46, 0.92);

  /* For quick accelerations */
  --ease-accelerate: cubic-bezier(0.4, 0, 1, 1);

  /* For smooth decelerations */
  --ease-decelerate: cubic-bezier(0, 0, 0.2, 1);

  /* 
     * BASIC DELAYS
     * -------------
     * Base values for staggered effects
     */
  --delay-minimum: 20ms;
  --delay-fast: 50ms;
  --delay-standard: 100ms;
  --delay-stagger: 30ms;
  /* For sequential elements */
}

/* 
   * UTILITY CLASSES FOR TRANSITIONS
   * ---------------------------------
   * Classes to apply directly in components
   */

/* Transitions for basic properties */
.transition-standard {
  transition-property:
    transform, opacity, color, background-color, border-color;
  transition-duration: var(--duration-standard);
  transition-timing-function: var(--ease-standard);
}

.transition-fast {
  transition-property:
    transform, opacity, color, background-color, border-color;
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--ease-standard);
}

/* Specific transitions */
.transition-color {
  transition-property: color;
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--ease-standard);
}

.transition-bg {
  transition-property: background-color;
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--ease-standard);
}

.transition-transform {
  transition-property: transform;
  transition-duration: var(--duration-standard);
  transition-timing-function: var(--ease-bounce);
}

.transition-fade {
  transition-property: opacity;
  transition-duration: var(--duration-standard);
  transition-timing-function: var(--ease-standard);
}

/* Classes for hover effects on interactive elements */
.hover-lift {
  transition: transform var(--duration-fast) var(--ease-bounce);
}

.hover-lift:hover {
  transform: translateY(-4px);
}

.hover-scale {
  transition: transform var(--duration-fast) var(--ease-bounce);
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-bright {
  transition: filter var(--duration-fast) var(--ease-standard);
}

.hover-bright:hover {
  filter: brightness(1.1);
}

/* 
   * KEYFRAME ANIMATIONS
   * ----------------
   * Reusable animations
   */
@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }

  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes pulseOnce {
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.05);
  }

  100% {
    transform: scale(1);
  }
}

/* Classes to apply animations */
.animate-fadeIn {
  animation: fadeIn var(--duration-standard) var(--ease-standard) forwards;
}

.animate-fadeInUp {
  animation: fadeInUp var(--duration-standard) var(--ease-bounce) forwards;
}

.animate-fadeInLeft {
  animation: fadeInLeft var(--duration-standard) var(--ease-standard) forwards;
}

.animate-fadeInRight {
  animation: fadeInRight var(--duration-standard) var(--ease-standard) forwards;
}

.animate-scaleIn {
  animation: scaleIn var(--duration-standard) var(--ease-bounce) forwards;
}

.animate-pulseOnce {
  animation: pulseOnce 600ms var(--ease-elastic) forwards;
}

/* Staggering system with classes */
.stagger-container > * {
  opacity: 0;
}

.stagger-visible.stagger-container > *:nth-child(1) {
  animation-delay: calc(var(--delay-stagger) * 1);
}

.stagger-visible.stagger-container > *:nth-child(2) {
  animation-delay: calc(var(--delay-stagger) * 2);
}

.stagger-visible.stagger-container > *:nth-child(3) {
  animation-delay: calc(var(--delay-stagger) * 3);
}

.stagger-visible.stagger-container > *:nth-child(4) {
  animation-delay: calc(var(--delay-stagger) * 4);
}

.stagger-visible.stagger-container > *:nth-child(5) {
  animation-delay: calc(var(--delay-stagger) * 5);
}

/* Configuration for reduced motion */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
