/**
 * Script unificado para el proceso de compilaci√≥n
 * Ejecuta todas las tareas necesarias en el orden correcto
 * File: scripts/build.js
 */

import { execSync } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// Obtener dirname en ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Asegurarse de que existan las carpetas necesarias en public/
 */
async function ensurePublicDirectories() {
    console.log('üîç Verificando directorios...');

    try {
        // Crear directorios si no existen
        await fs.mkdir(path.join(__dirname, '../public/styles'), { recursive: true });
        await fs.mkdir(path.join(__dirname, '../public/styles/fonts'), { recursive: true });
        console.log('‚úÖ Directorios verificados');
    } catch (error) {
        console.error('‚ùå Error al verificar directorios:', error);
        process.exit(1);
    }
}

/**
 * Copiar archivos CSS de src/styles a public/styles
 */
async function copyStylesToDist() {
    console.log('üìù Copiando estilos...');

    try {
        const srcDir = path.join(__dirname, '../src/styles');
        const destDir = path.join(__dirname, '../public/styles');

        // Leer todos los archivos CSS
        const files = await fs.readdir(srcDir);

        // Copiar cada archivo CSS
        for (const file of files) {
            if (file.endsWith('.css')) {
                await fs.copyFile(
                    path.join(srcDir, file),
                    path.join(destDir, file)
                );
                console.log(`  ‚úì Copiado: ${file}`);
            }
        }

        console.log('‚úÖ Estilos copiados correctamente');
    } catch (error) {
        console.error('‚ùå Error al copiar estilos:', error);
        process.exit(1);
    }
}

/**
 * Configurar Font Awesome para asegurar que las fuentes est√©n disponibles
 */
async function setupFontAwesome() {
    console.log('üî§ Configurando Font Awesome...');

    try {
        // Ejecutar el script existente para Font Awesome
        execSync('node scripts/setup-font-awesome.js', { stdio: 'inherit' });
        console.log('‚úÖ Font Awesome configurado');
    } catch (error) {
        console.error('‚ùå Error al configurar Font Awesome:', error);
        process.exit(1);
    }
}

/**
 * Generar sitemap
 */
async function generateSitemap() {
    console.log('üó∫Ô∏è Generando sitemap...');

    try {
        execSync('node scripts/generate-sitemap.js', { stdio: 'inherit' });
        console.log('‚úÖ Sitemap generado');
    } catch (error) {
        console.error('‚ùå Error al generar sitemap:', error);
        // No salir en este caso, no es cr√≠tico
    }
}

/**
 * Ejecutar la compilaci√≥n de Astro
 */
async function buildAstro() {
    console.log('üöÄ Compilando con Astro...');

    try {
        execSync('astro build', { stdio: 'inherit' });
        console.log('‚úÖ Compilaci√≥n completada');
    } catch (error) {
        console.error('‚ùå Error durante la compilaci√≥n:', error);
        process.exit(1);
    }
}

/**
 * Funci√≥n principal que ejecuta todo el proceso de compilaci√≥n
 */
async function build() {
    console.log('üèóÔ∏è Iniciando proceso de compilaci√≥n...');

    const startTime = Date.now();

    try {
        // Ejecutar tareas en secuencia
        await ensurePublicDirectories();
        await setupFontAwesome();
        await copyStylesToDist();
        await generateSitemap();
        await buildAstro();

        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        console.log(`‚ú® Compilaci√≥n completada en ${duration}s`);
    } catch (error) {
        console.error('‚ùå Error en el proceso de compilaci√≥n:', error);
        process.exit(1);
    }
}

// Ejecutar la funci√≥n principal
build();