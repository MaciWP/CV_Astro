---
// Import components
import Navbar from "../components/Navbar";
import { getRelativeLocaleUrl } from "astro:i18n";

// Define props interface
export interface Props {
  title?: string;
  description?: string;
  lang?: string;
  ogImage?: string;
  canonicalUrl?: string;
  alternateUrls?: {
    en?: string;
    es?: string;
    fr?: string;
  };
}

// Destructure props with defaults
const {
  title = "Oriol Macias - Software Developer CV & Portfolio",
  description = "Professional CV for Oriol Macias, a Software Developer specialized in backend development, industrial protocols integration, and data center infrastructure.",
  lang = "en",
  ogImage = "/images/oriol_macias.jpg",
  canonicalUrl = "https://oriolmacias.dev/",
  alternateUrls = {},
} = Astro.props;

// Construct full canonical URL based on current page path
const fullCanonicalUrl = canonicalUrl.startsWith("http")
  ? canonicalUrl
  : new URL(Astro.url.pathname, "https://oriolmacias.dev").href;
---

<!doctype html>
<html lang={lang} class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Basic meta tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content="Oriol Macias" />
    <link rel="canonical" href={fullCanonicalUrl} />

    <!-- Alternate language versions -->
    {
      alternateUrls.en && (
        <link rel="alternate" hreflang="en" href={alternateUrls.en} />
      )
    }
    {
      alternateUrls.es && (
        <link rel="alternate" hreflang="es" href={alternateUrls.es} />
      )
    }
    {
      alternateUrls.fr && (
        <link rel="alternate" hreflang="fr" href={alternateUrls.fr} />
      )
    }
    <link
      rel="alternate"
      hreflang="x-default"
      href="https://oriolmacias.dev/"
    />

    <!-- Open Graph / Social Media -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={fullCanonicalUrl} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={lang} />
    {lang === "es" && <meta property="og:locale:alternate" content="es_ES" />}
    {lang === "fr" && <meta property="og:locale:alternate" content="fr_FR" />}

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />

    <!-- Favicon and PWA -->
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="theme-color" content="#D83333" />
    <link rel="manifest" href="/manifest.json" />
    <link rel="apple-touch-icon" href="/icons/favicon.svg" />

    <!-- Preload critical assets -->
    <link
      rel="preload"
      href="/styles/fonts/fa-solid-900.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/styles/fonts/fa-brands-400.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/styles/font-awesome-fallback.css" />
    <link rel="stylesheet" href="/styles/font-awesome.min.css" />

    <!-- Critical Font Awesome styles inlined for faster rendering -->
    <style is:inline>
      /* Core Font Awesome styles for immediate icon rendering */
      @font-face {
        font-family: "Font Awesome 5 Free";
        font-style: normal;
        font-weight: 900;
        font-display: swap;
        src: url("/styles/fonts/fa-solid-900.woff2") format("woff2");
      }

      @font-face {
        font-family: "Font Awesome 5 Brands";
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url("/styles/fonts/fa-brands-400.woff2") format("woff2");
      }

      .fas,
      .fa-solid {
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
        display: inline-block;
        font-style: normal;
        font-variant: normal;
        text-rendering: auto;
        line-height: 1;
      }

      .fab,
      .fa-brands {
        font-family: "Font Awesome 5 Brands";
        font-weight: 400;
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
        display: inline-block;
        font-style: normal;
        font-variant: normal;
        text-rendering: auto;
        line-height: 1;
      }
    </style>

    <!-- Establecer idioma actual para scripts cliente y depuración -->
    <script is:inline define:vars={{ currentLang: lang }}>
      // Establecer el idioma actual en una variable global
      window.CURRENT_LANGUAGE = currentLang;
      console.log("Current language set to:", window.CURRENT_LANGUAGE);

      // Función simplificada para buscar traducciones
      window.t = function (key) {
        // Esta función será reemplazada por la implementación completa más adelante
        // Pero proporcionamos una versión básica para evitar errores antes de que se cargue
        return key.split(".").pop();
      };

      // Objeto global para almacenar traducciones una vez cargadas
      window.TRANSLATIONS = {};
    </script>

    <!-- Theme initialization script -->
    <script is:inline>
      (function () {
        // Get stored theme or default to dark
        const storedTheme = localStorage.getItem("theme") || "dark";

        // Apply theme class
        document.documentElement.classList.add(storedTheme);
      })();
    </script>

    <!-- Print styles for PDF download capability -->
    <style is:inline>
      @media print {
        nav,
        footer,
        button:not(#cv-download-button),
        .no-print {
          display: none !important;
        }

        body {
          background-color: white !important;
          color: black !important;
        }

        @page {
          size: A4 portrait;
          margin: 1.5cm;
        }

        main {
          padding: 0 !important;
        }

        /* Remove shadows and hover effects */
        * {
          box-shadow: none !important;
          transition: none !important;
        }

        /* Adjust colors for printing */
        .dark\:text-dark-text,
        .dark\:text-dark-text-secondary,
        .text-light-text,
        .text-light-text-secondary {
          color: #000 !important;
        }

        .dark\:bg-dark-surface,
        .dark\:bg-dark-secondary,
        .bg-light-surface,
        .bg-light-secondary {
          background-color: #fff !important;
        }

        /* Ensure all sections are visible */
        .opacity-0 {
          opacity: 1 !important;
        }

        /* Maintain the red accent for visual identity */
        .border-brand-red {
          border-color: #d83333 !important;
        }

        /* Ensure all text is visible */
        .text-brand-red {
          color: #d83333 !important;
        }

        /* Ensure backgrounds print correctly */
        .bg-brand-red {
          background-color: #d83333 !important;
        }
      }
    </style>

    <!-- Script para cargar traducciones en cliente -->
    <script>
      // Función para cargar traducciones al inicio
      async function loadTranslations() {
        // Asegurarnos de que la propiedad exista
        const currentLanguage =
          typeof window !== "undefined" && window.CURRENT_LANGUAGE
            ? window.CURRENT_LANGUAGE
            : "en";

        try {
          const response = await fetch(
            `/locales/${currentLanguage}/translation.json?v=${Date.now()}`,
          );
          if (response.ok) {
            const data = await response.json();

            // Asegurarnos de que las propiedades estén inicializadas
            if (typeof window !== "undefined") {
              window.TRANSLATIONS = window.TRANSLATIONS || {};
              if (window.TRANSLATIONS) {
                window.TRANSLATIONS[currentLanguage] = data;
              }
            }

            // Reimplementar la función t() con las traducciones cargadas
            if (typeof window !== "undefined") {
              window.t = function (key) {
                // Verificar que TRANSLATIONS exista
                const translations =
                  window.TRANSLATIONS && window.TRANSLATIONS[currentLanguage]
                    ? window.TRANSLATIONS[currentLanguage]
                    : {};

                const keys = key.split(".");
                let result = translations;

                for (const k of keys) {
                  if (result && typeof result === "object" && k in result) {
                    result = result[k];
                  } else {
                    // Fallback a la última parte de la clave
                    return keys[keys.length - 1];
                  }
                }

                return result || keys[keys.length - 1];
              };
            }

            console.log(
              `Translations for ${currentLanguage} loaded successfully`,
            );

            // Actualizar texto visible en la página
            document.dispatchEvent(new CustomEvent("translationsLoaded"));
          }
        } catch (error) {
          console.error("Error loading translations:", error);
        }
      }

      // Cargar traducciones en cuanto el DOM esté listo
      document.addEventListener("DOMContentLoaded", loadTranslations);
    </script>
  </head>
  <body
    class="min-h-screen bg-light-primary dark:bg-dark-primary text-light-text dark:text-dark-text font-sans transition-colors duration-300"
  >
    <div id="app-root">
      <!-- Navbar with client:load for immediate rendering -->
      <Navbar client:load />

      <main class="container mx-auto px-4 py-8 max-w-5xl">
        <slot />
      </main>

      <!-- Simple Footer -->
      <footer
        class="py-8 border-t border-light-border dark:border-dark-border bg-light-primary dark:bg-dark-primary transition-colors duration-300"
      >
        <div class="container mx-auto px-4 max-w-5xl">
          <div
            class="flex flex-col md:flex-row justify-between items-center gap-4"
          >
            <div class="flex items-center gap-2">
              <div
                class="h-6 w-6 bg-brand-red rounded-none flex items-center justify-center"
              >
                <span class="text-white font-bold text-xs">OM</span>
              </div>
              <p
                class="text-sm text-light-text-secondary dark:text-dark-text-secondary"
              >
                © {new Date().getFullYear()} Oriol Macias
              </p>
            </div>
            <div class="flex items-center gap-6">
              <a
                href="#top"
                class="text-sm flex items-center text-light-text-secondary dark:text-dark-text-secondary hover:text-brand-red dark:hover:text-brand-red transition-colors"
              >
                <i class="fas fa-arrow-up mr-2 text-xs"></i>
                {
                  lang === "es"
                    ? "Volver arriba"
                    : lang === "fr"
                      ? "Retour en haut"
                      : "Back to top"
                }
              </a>
              <button
                id="cv-download-button"
                class="text-xs h-8 flex items-center px-3 py-1 border border-brand-red text-brand-red dark:text-brand-red hover:bg-brand-red hover:text-white dark:hover:bg-brand-red dark:hover:text-white transition-colors duration-300"
                onclick="window.print()"
              >
                <i class="fas fa-download mr-2"></i>
                {
                  lang === "es"
                    ? "Descargar CV"
                    : lang === "fr"
                      ? "Télécharger CV"
                      : "Download CV"
                }
              </button>
            </div>
          </div>
        </div>
      </footer>
    </div>

    <!-- Script for smooth scrolling to sections -->
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        // Smooth scroll for anchors
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", function (e) {
            const targetId = this.getAttribute("href").substring(1);
            if (!targetId) return; // Avoid errors with href="#"

            const targetElement = document.getElementById(targetId);

            if (targetElement) {
              e.preventDefault();
              const navbarHeight = 80; // Estimated navbar height
              const position =
                targetElement.getBoundingClientRect().top +
                window.pageYOffset -
                navbarHeight;

              window.scrollTo({
                top: position,
                behavior: "smooth",
              });
            }
          });
        });
      });
    </script>

    <!-- Service Worker Registration - Only for production -->
    <script is:inline>
      // Only register in production (not local)
      if (
        window.location.hostname !== "localhost" &&
        window.location.hostname !== "127.0.0.1" &&
        "serviceWorker" in navigator
      ) {
        window.addEventListener("load", () => {
          navigator.serviceWorker
            .register("/sw.js?v=" + new Date().getTime())
            .then((registration) => {
              console.log("Service Worker registered successfully");
            })
            .catch((error) => {
              console.error("Service Worker registration failed:", error);
            });
        });
      }
    </script>
    <!-- Actualizar textos cuando se carguen las traducciones -->
    <script is:inline>
      document.addEventListener("translationsLoaded", function () {
        // Buscar elementos con atributos data-i18n y actualizarlos
        document.querySelectorAll("[data-i18n]").forEach(function (element) {
          const key = element.getAttribute("data-i18n");
          if (key && window.t) {
            element.textContent = window.t(key);
          }
        });
      });
    </script>
  </body>
</html>

<style is:global>
  @import "../styles/global.css";
</style>
