---
// Import components
import I18nLoader from "../components/I18nLoader";
import ErrorBoundary from "../components/ErrorBoundary";
import SkipToContent from "../components/SkipToContent";
import A11yAnnouncer from "../components/A11yAnnouncer";

import LayoutHead from "./LayoutHead.astro";
import NavigationHeader from "./NavigationHeader.astro";
import LayoutFooter from "./LayoutFooter.astro";

// Define props interface
export interface Props {
  title?: string;
  description?: string;
  lang?: string;
  ogImage?: string;
  canonicalUrl?: string;
  alternateUrls?: {
    en?: string;
    es?: string;
    fr?: string;
  };
}

// Destructure props with defaults
const {
  title = "Oriol Macias - Software Developer CV & Portfolio",
  description = "Professional CV for Oriol Macias, a Software Developer specialized in backend development, industrial protocols integration, and data center infrastructure.",
  lang = "en",
  ogImage = "/images/oriol_macias.jpg",
  canonicalUrl = "https://oriolmacias.dev/",
  alternateUrls = {},
} = Astro.props;

// Construct full canonical URL based on current page path
const fullCanonicalUrl = canonicalUrl.startsWith("http")
  ? canonicalUrl
  : new URL(Astro.url.pathname, "https://oriolmacias.dev").href;
---

<!doctype html>
<html lang={lang} class="dark" dir="ltr">
    <LayoutHead title={title} description={description} lang={lang} ogImage={ogImage} fullCanonicalUrl={fullCanonicalUrl} alternateUrls={alternateUrls} />
  <body
    class="min-h-screen bg-light-primary dark:bg-dark-primary text-light-text dark:text-dark-text font-sans transition-colors duration-300"
  >
    <div id="app-root">
      <!-- Accessibility components -->
      <SkipToContent client:load />
      <A11yAnnouncer client:load />

      <I18nLoader client:only>
        <!-- Navbar with ErrorBoundary -->
        <NavigationHeader />

        <!-- Main content with ARIA landmark -->
        <main
          id="cv-content"
          role="main"
          class="container mx-auto px-4 py-8 max-w-5xl"
        >
          <ErrorBoundary>
            <slot />
          </ErrorBoundary>
        </main>

        <LayoutFooter lang={lang} />
      </I18nLoader>
    </div>
    <script is:inline src="/scripts/react-error-recovery.js"></script>
  </body><!-- Script for smooth scrolling to sections -->
  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      // Smooth scroll for anchors
      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener("click", function (e) {
          const targetId = this.getAttribute("href").substring(1);
          if (!targetId) return; // Avoid errors with href="#"

          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            e.preventDefault();
            const navbarHeight = 80; // Estimated navbar height
            const position =
              targetElement.getBoundingClientRect().top +
              window.pageYOffset -
              navbarHeight;

            window.scrollTo({
              top: position,
              behavior: "smooth",
            });

            // Announce to screen readers (if function is available)
            if (window.announceToScreenReader) {
              const elementTitle =
                targetElement.querySelector("h2, h3")?.textContent || targetId;
              window.announceToScreenReader(
                `Navigated to ${elementTitle} section`,
              );
            }

            // Set focus to the target element (for keyboard accessibility)
            targetElement.setAttribute("tabindex", "-1");
            targetElement.focus({ preventScroll: true });

            // Remove tabindex after blur to avoid persistent tab stops
            targetElement.addEventListener("blur", function onBlur() {
              targetElement.removeAttribute("tabindex");
              targetElement.removeEventListener("blur", onBlur);
            });
          }
        });
      });
    });
  </script>

  <!-- Update translated elements in the DOM when translations load -->
  <script is:inline>
    document.addEventListener("translationsLoaded", () => {
      // Actualizar elementos con atributo data-i18n
      if (window.i18n && typeof window.i18n.updateElements === "function") {
        window.i18n.updateElements();
      } else {
        // Fallback manual implementation
        document.querySelectorAll("[data-i18n]").forEach((element) => {
          const key = element.getAttribute("data-i18n");
          if (key && typeof window.t === "function") {
            element.textContent = window.t(key);
          }
        });
      }

      // Announce to screen readers that translations are loaded
      if (window.announceToScreenReader) {
        const lang = window.CURRENT_LANGUAGE || "en";
        const langNames = {
          en: "English",
          es: "Spanish",
          fr: "French",
        };
        window.announceToScreenReader(
          `Content now available in ${langNames[lang] || lang}`,
        );
      }
    });
  </script>

  <!-- Service Worker Registration - Only for production -->
  <script is:inline>
    // Only register in production (not local)
    if (
      window.location.hostname !== "localhost" &&
      window.location.hostname !== "127.0.0.1" &&
      "serviceWorker" in navigator
    ) {
      window.addEventListener("load", () => {
        navigator.serviceWorker
          .register("/sw.js?v=" + new Date().getTime())
          .then((registration) => {
            console.log("Service Worker registered successfully");
          })
          .catch((error) => {
            console.error("Service Worker registration failed:", error);
          });
      });
    }
  </script>
</html>

<style is:global>
  @import "../styles/global.css";
</style>
